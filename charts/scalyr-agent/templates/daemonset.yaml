{{ if eq .Values.controllerType "daemonset" }}

{{- if (or (or (.Values.scalyr.k8s.enableMetrics) (.Values.scalyr.k8s.enableLogs)) (.Values.scalyr.k8s.enableExplorer))  }}
{{- $name := .Values.scalyr.k8s.clusterName | required ".Values.scalyr.k8s.clusterName is required." -}}
{{- end }}

apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ include "scalyr-helm.fullname" . }}
  labels:
    {{- include "scalyr-helm.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "scalyr-helm.selectorLabels" . | nindent 6 }}
  template:
    metadata:
    {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        {{- include "scalyr-helm.selectorLabels" . | nindent 8 }}
        {{- include "scalyr-helm.podLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
      {{- if or (.Values.scalyr.k8s.enableMetrics) (.Values.scalyr.k8s.enableLogs) }}
        - name: "varlibdockercontainers"
          hostPath:
            path: "/var/lib/docker/containers"
        - name: "varlogpods"
          hostPath:
            path: "/var/log/pods"
        - name: "varlogcontainers"
          hostPath:
            path: "/var/log/containers"
        - name: "dockersock"
          hostPath:
            path: "/var/run/docker.sock"
      {{- end }}
        - name: "checkpoints"
          hostPath:
            path: "/tmp/scalyr-agent-{{ include "scalyr-helm.fullname" . }}"
            type: "DirectoryOrCreate"
        - name: "scalyr-config-agent-d"
          configMap:
            name: "{{ include "scalyr-helm.fullname" . }}-config-agent-d"
            defaultMode: 0600
      {{- if .Values.volumes }}
      {{- toYaml .Values.volumes | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          {{- if eq .Values.image.type "alpine" }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}-alpine"
          {{- else if eq .Values.image.type "buster"}}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          {{- else }}
          {{- fail "Valid values for .Values.image.type are: buster, alpine" }}
          {{- end }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            exec:
              command:
              - scalyr-agent-2
              - status
              - -H
            initialDelaySeconds: 60
            periodSeconds: 60
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          {{- end }}
          env:
            - name: "SCALYR_SERVER"
              value: {{ .Values.scalyr.server }}
            - name: "SCALYR_API_KEY"
              valueFrom:
                secretKeyRef:
                  {{- if .Values.existingSecretRef }}
                  name: {{ .Values.existingSecretRef }}
                  {{- else }}
                  name: "{{ include "scalyr-helm.fullname" . }}-scalyr-api-key"
                  {{- end }}
                  key: "scalyr-api-key"
            {{- if (or (or (.Values.scalyr.k8s.enableMetrics) (.Values.scalyr.k8s.enableLogs)) (.Values.scalyr.k8s.enableExplorer))  }}
            - name: "SCALYR_K8S_CLUSTER_NAME"
              value: "{{ .Values.scalyr.k8s.clusterName }}"
            - name: "SCALYR_K8S_VERIFY_KUBELET_QUERIES"
              value: "{{- if .Values.scalyr.k8s.verifyKubeletQueries }}true{{ else }}false{{- end }}"
            {{- if (.Values.scalyr.k8s.caCert) }}
            - name: "SCALYR_K8S_KUBELET_CA_CERT"
              value: "{{ .Values.scalyr.k8s.caCert }}"
            {{- end }}
            {{- if (.Values.scalyr.k8s.enableExplorer) }}
            - name: "SCALYR_K8S_EXPLORER_ENABLE"
              value: "true"
            {{- end }}
            {{- if (not (eq (int .Values.scalyr.debugLevel) 0)) }}
            - name: "SCALYR_DEBUG_LEVEL"
              value: "{{ .Values.scalyr.debugLevel }}"
            {{- end }}
            - name: "SCALYR_K8S_NODE_NAME"
              valueFrom:
                fieldRef:
                  fieldPath: "spec.nodeName"
                  apiVersion: "v1"
            - name: "SCALYR_K8S_POD_NAME"
              valueFrom:
                fieldRef:
                  fieldPath: "metadata.name"
                  apiVersion: "v1"
            - name: "SCALYR_K8S_POD_NAMESPACE"
              valueFrom:
                fieldRef:
                  fieldPath: "metadata.namespace"
                  apiVersion: "v1"
            - name: "SCALYR_K8S_POD_UID"
              valueFrom:
                fieldRef:
                  fieldPath: "metadata.uid"
                  apiVersion: "v1"
            - name: "SCALYR_K8S_KUBELET_HOST_IP"
              valueFrom:
                fieldRef:
                  fieldPath: "status.hostIP"
                  apiVersion: "v1"
            {{- end }}
            {{- if .Values.extraEnvVars }}
              {{- toYaml .Values.extraEnvVars | nindent 12 }}
            {{- end }}
          volumeMounts:
          {{- if or (.Values.scalyr.k8s.enableMetrics) (.Values.scalyr.k8s.enableLogs) }}
            - name: "varlibdockercontainers"
              mountPath: "/var/lib/docker/containers"
              readOnly: true
            - name: "varlogpods"
              mountPath: "/var/log/pods"
              readOnly: true
            - name: "varlogcontainers"
              mountPath: "/var/log/containers"
              readOnly: true
            - name: "dockersock"
              mountPath: "/var/scalyr/docker.sock"
          {{- end }}
          {{- if .Values.volumeMounts }}
          {{- toYaml .Values.volumeMounts | nindent 12 }}
          {{- end }}
            - name: "checkpoints"
              mountPath: "/var/lib/scalyr-agent-2"
            - name: "scalyr-config-agent-d"
              mountPath: "/etc/scalyr-agent-2/agent.d"
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      terminationGracePeriodSeconds: 30
      dnsPolicy: "ClusterFirst"
      {{- if or (.Values.scalyr.k8s.enableMetrics) (.Values.scalyr.k8s.enableLogs) }}
      automountServiceAccountToken: true
      serviceAccountName: "{{ include "scalyr-helm.fullname" . }}-sa"
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end }}
