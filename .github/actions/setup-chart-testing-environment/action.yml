name: "Setup chart testing environment"
description: "Action which sets up Helm chart testing environment, optionally also installing specific Kubernetes version using minikube"

inputs:
  minikube_version:
    description: "Minikube version to use"
    required: false
    default: "v1.27.1"
  k8s_version:
    description: "Kubernetes version to be installed by minikube (if any)"
    required: false
    default: ""
  minikube_driver:
    description: "Minikube driver to use"
    required: false
    default: "docker"
  container_runtime:
    description: "Container runtime to use"
    required: false
    default: "docker"
  github_token:
    description: "Github token to use for communication with Github API to avoid rate limits"
    required: true

runs:
  using: "composite"
  steps:
    - name: Set up Helm
      id: setup-helm
      uses: azure/setup-helm@5119fcb9089d432beecbf79bb2c7915207344b78 # v3.5
      with:
        version: "latest"
        # Needed so it can fetch latest version
        token: "${{ inputs.github_token }}"

    - uses: actions/setup-python@v4
      id: setup-python
      with:
        python-version: 3.8

    - name: Set up chart-testing
      id: setup-chart-testing
      uses: helm/chart-testing-action@09ed88797198755e5031f25be13da255e7e33aad  # v2.3.0
      with:
        version: v3.7.0

    - name: Create minikube Kubernetes ${{ inputs.k8s_version }} Cluster
      id: create-minikube-cluster
      if: ${{ inputs.k8s_version != '' }}
      uses: manusa/actions-setup-minikube@aa7a69c8cdc3e095a90e146e8f96cdaf950e2e7e # v2.7.2
      with:
        minikube version: '${{ inputs.minikube_version }}'
        kubernetes version: '${{ inputs.k8s_version }}'
        container runtime: '${{ inputs.container_runtime }}'
        driver: '${{ inputs.minikube_driver }}'
        start args: '--wait=all'
        github token: '${{ inputs.github_token }}'

    - name: Print minikube environment info
      id: print-k8s-cluster-info
      if: ${{ inputs.k8s_version != '' }}
      shell: bash
      run: |
        # Workaround for occasional DNS issues
        # kubectl -n kube-system rollout restart deployment coredns
        kubectl version
        minikube addons list
        kubectl get nodes
        kubectl cluster-info
        kubectl get pods -A
